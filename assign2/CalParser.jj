/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CalParser.jj */
/*@egen*//*******************************
 ***** SECTION 1 - OPTIONS *****
 *******************************/
options 
{ 
	JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;
    DEBUG_TOKEN_MANAGER= false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
	               
	             
	                 
 }

/*********************************
 ***** SECTION 2 - USER CODE *****
 *********************************/
PARSER_BEGIN(CalParser)
import java.io.*;
import java.util.*;

public class CalParser/*@bgen(jjtree)*/implements CalParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCalParserState jjtree = new JJTCalParserState();

/*@egen*/
    static String scope;
    static SymbolTable st;
	public static void main(String args[]){
		CalParser parser;
		if (args.length == 0){
			System.out.println("CAL parser: Reading from input: ");
			parser = new CalParser(System.in);
		} else if (args.length == 1) {
			System.out.println("CAL Parser: Reading from file " + args[0] + "..");
		
		try {
			parser = new CalParser(new FileInputStream(args[0]));
		} catch (java.io.FileNotFoundException e) {
			System.out.println("CAL Parser: File " + args[0] + "not found.");
			return;
			}
		}
		else {
			System.out.println("CAL Parser: Usage is one of:");
			System.out.println("		java CalParser < inputfile");
			System.out.println("OR");
			System.out.println("		java CalParser inputfile");
			return;
		}
		
		try {
			st = new SymbolTable();
			SimpleNode root = parser.Prog();

			System.out.println("\n### AST ###");
			root.dump("> ");
			System.out.println("\n### END AST ###");


            st.printSymbolTable();

            MyVisitor v = new MyVisitor();
            root.jjtAccept(v, st);

			System.out.println("CAL Parser: CAL program parsed successfully");
			}catch (ParseException e) {
				System.out.println(e.getMessage());
				System.out.println("CAL Parser: Encountered errors during parse.");

		}
	}
}
PARSER_END(CalParser)

/*****************************************
 ***** SECTION 3 - TOKEN DEFINITIONS *****
 *****************************************/

TOKEN_MGR_DECLS:
{
	static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	  " "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

SKIP : /* Comments */
{
	  "/*" { commentNesting ++;} : IN_COMMENT
	| <"//" (~["\n"])* "\n">
}

<IN_COMMENT> SKIP : 
{
   "/*" { commentNesting++;}
   | "*/" { commentNesting--;
            if(commentNesting == 0)
                SwitchTo(DEFAULT);
            }
   |<~[]>
}

TOKEN : /*Keywords and Punctuation */
{
	<COMMA : ",">
	|<SEMIC : ";">
	|<COLON : ":">
	|<ASSIGN : ":=">
	|<LB : "(">
	|<RB : ")">
	|<PLUS : "+">
	|<MINUS : "-">
	|<NOT : "~">
	|<OR : "|">
	|<AND : "&">
	|<EQUAL : "=">
	|<NEQ : "!=">
	|<LT : "<">
	|<LTE : "<=">
	|<GT : ">">
	|<GTE : ">=">

	|<VAR : "variable">
	|<CONS : "constant">
	|<RET : "return">
	|<INT : "integer">
	|<BOOL : "boolean">
	|<VOID : "void">
	|<MAIN : "main">
	|<IF : "if">
	|<ELSE : "else">
	|<TRUE : "true">
	|<FALSE : "false">
	|<WHILE : "while">
	|<BEGIN : "begin">
	|<END : "end">
	|<IS : "is">
	|<SSKIP : "skip">

	|< #LETTER: (["a"-"z", "A"-"Z"])>
	|< IDENTIFIER: <LETTER> (<LETTER> | <NUMBER> | "_")* >
	|< #DIGIT: ["0" - "9"]>
	|< NUMBER: ("-" ["1" - "9"] (<DIGIT>)*)
			   |( ["1" - "9"] (<DIGIT>)* ) 
			   | "0">	

    |<OTHER : ~[]>
}


/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

SimpleNode Prog() : {/*@bgen(jjtree) Prog */
  Prog jjtn000 = new Prog(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Prog */
    try {
/*@egen*/
    {scope = "global";}

	decl_list() 
	function_list() 
	main()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void decl_list()       : {}
{
	(decl() <SEMIC> decl_list()) | {} 
}

void decl()       : {}
{
	var_decl() | const_decl()
}

// Creating Identifier prod rule to return info based on ExprLang.jjt by David Sinclair
void var_decl()          : {/*@bgen(jjtree) Var_dec */
                            Var_dec jjtn000 = new Var_dec(JJTVAR_DEC);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Var_dec */
        try {
/*@egen*/
	t = <VAR> id = identifier() <COLON> type = type()/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/ {st.put(id, type, "var",  scope);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String identifier()             : {/*@bgen(jjtree) Identifier */
                                   Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void const_decl()            : {/*@bgen(jjtree) Const_dec */
                                Const_dec jjtn000 = new Const_dec(JJTCONST_DEC);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Const_dec */
        try {
/*@egen*/
	t = <CONS>  id = identifier() <COLON> type = type() <ASSIGN> expression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value = t.image;
        st.put(id, type, "const", scope);
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function_list()       : {}
{
	function() function_list() | {}
}

void function()           : {/*@bgen(jjtree) Function */
                             Function jjtn000 = new Function(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/String id; String type;}
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	type = type() id = identifier()
	{
            //function dec is global, then let parameters fall under func scope.
            st.put(id, type, "function", scope);
            scope = id;
    }
	<LB> parameter_list()<RB> <IS>
	decl_list()
	<BEGIN>
	statement_block()
	<RET> <LB> (/*@bgen(jjtree) #Ret( 1) */
                    {
                      Ret jjtn001 = new Ret(JJTRET);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/expression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  1);
                      }
                    }
/*@egen*/        |/*@bgen(jjtree) Ret */
                                         {
                                           Ret jjtn002 = new Ret(JJTRET);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                         }
                                         try {
/*@egen*//*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn002, true);
                                           jjtc002 = false;
                                         }
/*@egen*/{}/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002, true);
                                           }
                                         }
/*@egen*/     ) <RB> <SEMIC>
	<END>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{scope = "global";}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String type()       : {/*@bgen(jjtree) Type */
                       Type jjtn000 = new Type(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	(t = <INT> | t = <BOOL> | t =  <VOID>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// rewrite "more parameters" to stop nesting of param list node
void parameter_list()        : {}
{
        parameter()  (LOOKAHEAD(2)   <COMMA> parameter_list())?
    | {}
}

void parameter()         : {String id; String type;}
{
	(id = identifier() <COLON>/*@bgen(jjtree) #Parameter( 2) */
                                   {
                                     Parameter jjtn001 = new Parameter(JJTPARAMETER);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*/ type = type()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte001;
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       throw (ParseException)jjte001;
                                     }
                                     throw (Error)jjte001;
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                     }
                                   }
/*@egen*/              )
	{st.put(id, type, "parameter", scope);}

}

void main()      : {/*@bgen(jjtree) Main */
  Main jjtn000 = new Main(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
    try {
/*@egen*/
    {scope = "main";}
	<MAIN>
	<BEGIN>
	decl_list()
	statement_block()
	<END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void statement_block()       : {}
{
	statement() statement_block() | {}
}

void statement()      : {Token t;}
{
	  identifier() statement_beta()
	| <BEGIN> statement_block() <END>
	| (t = <IF> condition() <BEGIN> statement_block() <END>/*@bgen(jjtree) #Ifstate( 2) */
                                                                {
                                                                  Ifstate jjtn001 = new Ifstate(JJTIFSTATE);
                                                                  boolean jjtc001 = true;
                                                                  jjtree.openNodeScope(jjtn001);
                                                                }
                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                                  jjtc001 = false;
                                                                }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc001) {
                                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                                  }
                                                                }
/*@egen*/           )
	| (t = <ELSE> <BEGIN> statement_block() <END>/*@bgen(jjtree) #Els( 1) */
                                                      {
                                                        Els jjtn002 = new Els(JJTELS);
                                                        boolean jjtc002 = true;
                                                        jjtree.openNodeScope(jjtn002);
                                                      }
                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn002,  1);
                                                        jjtc002 = false;
                                                      }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                                      } finally {
                                                        if (jjtc002) {
                                                          jjtree.closeNodeScope(jjtn002,  1);
                                                        }
                                                      }
/*@egen*/        )
	| (t = <WHILE> condition() <BEGIN> statement_block() <END>/*@bgen(jjtree) #Whil( 2) */
                                                                   {
                                                                     Whil jjtn003 = new Whil(JJTWHIL);
                                                                     boolean jjtc003 = true;
                                                                     jjtree.openNodeScope(jjtn003);
                                                                   }
                                                                   try {
/*@egen*//*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn003,  2);
                                                                     jjtc003 = false;
                                                                   }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                                                                   } finally {
                                                                     if (jjtc003) {
                                                                       jjtree.closeNodeScope(jjtn003,  2);
                                                                     }
                                                                   }
/*@egen*/        )
	| <SSKIP> <SEMIC>
}

void statement_beta()       : {Token t;}
{
	  (t = <ASSIGN> expression() <SEMIC>/*@bgen(jjtree) #Assign( 2) */
                                             {
                                               Assign jjtn001 = new Assign(JJTASSIGN);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
                                             }
                                             try {
/*@egen*//*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                               jjtc001 = false;
                                             }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001,  2);
                                               }
                                             }
/*@egen*/           )
	| (t = <LB> arg_list() <RB> <SEMIC>/*@bgen(jjtree) #Func_call( 2) */
                                            {
                                              Func_call jjtn002 = new Func_call(JJTFUNC_CALL);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                            }
                                            try {
/*@egen*//*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn002,  2);
                                              jjtc002 = false;
                                            }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
                                            }
/*@egen*/              )
}

//Expression > Fragment > Expression.
void expression()       : {}
{
	  fragment() (binary_arith_op())
	  | (<LB> expression() <RB> binary_arith_op())
}

//rewrite bin op to allow children
void binary_arith_op()       : {Token t;}
{
	  ( (t = <PLUS> fragment()/*@bgen(jjtree) #Plus( 2) */
                                   {
                                     Plus jjtn001 = new Plus(JJTPLUS);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtc001 = false;
                                   }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                     }
                                   }
/*@egen*/         )
	  | (t = <MINUS> fragment()/*@bgen(jjtree) #Minus( 2) */
                                    {
                                      Minus jjtn002 = new Minus(JJTMINUS);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                      jjtc002 = false;
                                    }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                      }
                                    }
/*@egen*/          ))*
}

void fragment()       : {Token t;}
{
	  (t = <MINUS> identifier()/*@bgen(jjtree) #Minus_identifier( 1) */
                                    {
                                      Minus_identifier jjtn001 = new Minus_identifier(JJTMINUS_IDENTIFIER);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                      jjtc001 = false;
                                    }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  1);
                                      }
                                    }
/*@egen*/                     )
	| (t = <NUMBER>/*@bgen(jjtree) Num */
                        {
                          Num jjtn002 = new Num(JJTNUM);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                        }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/     )
	| (t = <TRUE>/*@bgen(jjtree) Bool */
                      {
                        Bool jjtn003 = new Bool(JJTBOOL);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                      }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
                      }
/*@egen*/      )
	| (t = <FALSE>/*@bgen(jjtree) Bool */
                       {
                         Bool jjtn004 = new Bool(JJTBOOL);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn004, true);
                         jjtc004 = false;
                       }
/*@egen*/ {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                         }
                       }
/*@egen*/      )
	|  identifier() (<LB> arg_list() <RB>)?
}

//Rewrite condition to make nodes?
void condition()       : {Token t;}
{
	 condition_beta()
	 (LOOKAHEAD(2)  (t = <AND> condition_beta()/*@bgen(jjtree) #And( 2) */
                                                    {
                                                      And jjtn001 = new And(JJTAND);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
                                                    }
                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                      jjtc001 = false;
                                                    }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                    } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                      }
                                                    }
/*@egen*/        
     |  t = <OR> condition_beta()/*@bgen(jjtree) #Or( 2) */
                                  {
                                    Or jjtn002 = new Or(JJTOR);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn002,  2);
                                    jjtc002 = false;
                                  }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                    }
                                  }
/*@egen*/       ))*

}

//have to rewrite cond_beta to capture 2nd expression as child
void condition_beta()       : {Token t;}
{
	  (t = <NOT> condition()/*@bgen(jjtree) #Not( 1) */
                                 {
                                   Not jjtn001 = new Not(JJTNOT);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn001,  1);
                                   jjtc001 = false;
                                 }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  1);
                                   }
                                 }
/*@egen*/        )
	| LOOKAHEAD(3) <LB> condition() <RB>
	//| expression() comp_op() expression()
	| expression() comp_op()
}

void comp_op()       : {}
{
	  <EQUAL>/*@bgen(jjtree) #Eq( 2) */
                  {
                    Eq jjtn001 = new Eq(JJTEQ);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
                  }
/*@egen*/       
	| <NEQ>/*@bgen(jjtree) #Neq( 2) */
                {
                  Neq jjtn002 = new Neq(JJTNEQ);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/          
	| <LT>/*@bgen(jjtree) #Lt( 2) */
               {
                 Lt jjtn003 = new Lt(JJTLT);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
               }
               try {
/*@egen*/ expression()/*@bgen(jjtree)*/
               } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   throw (RuntimeException)jjte003;
                 }
                 if (jjte003 instanceof ParseException) {
                   throw (ParseException)jjte003;
                 }
                 throw (Error)jjte003;
               } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  2);
                 }
               }
/*@egen*/          
	| <LTE>/*@bgen(jjtree) #Lte( 2) */
                {
                  Lte jjtn004 = new Lte(JJTLTE);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    throw (RuntimeException)jjte004;
                  }
                  if (jjte004 instanceof ParseException) {
                    throw (ParseException)jjte004;
                  }
                  throw (Error)jjte004;
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
                }
/*@egen*/          
	| <GT>/*@bgen(jjtree) #Gt( 2) */
               {
                 Gt jjtn005 = new Gt(JJTGT);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
               }
               try {
/*@egen*/ expression()/*@bgen(jjtree)*/
               } catch (Throwable jjte005) {
                 if (jjtc005) {
                   jjtree.clearNodeScope(jjtn005);
                   jjtc005 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte005 instanceof RuntimeException) {
                   throw (RuntimeException)jjte005;
                 }
                 if (jjte005 instanceof ParseException) {
                   throw (ParseException)jjte005;
                 }
                 throw (Error)jjte005;
               } finally {
                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005,  2);
                 }
               }
/*@egen*/          
	| <GTE>/*@bgen(jjtree) #Gte( 2) */
                {
                  Gte jjtn006 = new Gte(JJTGTE);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
                }
                try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    throw (RuntimeException)jjte006;
                  }
                  if (jjte006 instanceof ParseException) {
                    throw (ParseException)jjte006;
                  }
                  throw (Error)jjte006;
                } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006,  2);
                  }
                }
/*@egen*/          
}

void arg_list()           : {/*@bgen(jjtree) Arg_list */
  Arg_list jjtn000 = new Arg_list(JJTARG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arg_list */
        try {
/*@egen*/
	((identifier() (<COMMA> identifier())*))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

