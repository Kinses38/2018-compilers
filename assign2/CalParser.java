/* Generated By:JJTree&JavaCC: Do not edit this line. CalParser.java */
import java.io.*;
import java.util.*;

public class CalParser/*@bgen(jjtree)*/implements CalParserTreeConstants, CalParserConstants {/*@bgen(jjtree)*/
  protected static JJTCalParserState jjtree = new JJTCalParserState();public static void main(String args[]){
                CalParser parser;
                if (args.length == 0){
                        System.out.println("CAL parser: Reading from input: ");
                        parser = new CalParser(System.in);
                } else if (args.length == 1) {
                        System.out.println("CAL Parser: Reading from file " + args[0] + "..");

                try {
                        parser = new CalParser(new FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                        System.out.println("CAL Parser: File " + args[0] + "not found.");
                        return;
                        }
                }
                else {
                        System.out.println("CAL Parser: Usage is one of:");
                        System.out.println("\u0009\u0009java CalParser < inputfile");
                        System.out.println("OR");
                        System.out.println("\u0009\u0009java CalParser inputfile");
                        return;
                }

                try {
                        //parser.Prog();
                        SimpleNode root = parser.Prog();

                        System.out.println("### AST ###");
                        root.dump(">");
                        System.out.println("### END AST");

                        System.out.println("CAL Parser: CAL program parsed successfully");
                        }catch (ParseException e) {
                                System.out.println(e.getMessage());
                                System.out.println("CAL Parser: Encountered errors during parse.");

                }
        }

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/
  static final public SimpleNode Prog() throws ParseException {
    trace_call("Prog");
    try {
                     /*@bgen(jjtree) Prog */
  ASTProg jjtn000 = new ASTProg(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        decl_list();
        function_list();
        main();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Prog");
    }
  }

  static final public void decl_list() throws ParseException {
    trace_call("decl_list");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case CONS:
        decl();
        jj_consume_token(SEMIC);
        decl_list();
        break;
      default:
        jj_la1[0] = jj_gen;

      }
    } finally {
      trace_return("decl_list");
    }
  }

  static final public void decl() throws ParseException {
    trace_call("decl");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        var_decl();
        break;
      case CONS:
        const_decl();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("decl");
    }
  }

// Creating Identifier prod rule to return info based on ExprLang.jjt by David Sinclair
  static final public void var_decl() throws ParseException {
    trace_call("var_decl");
    try {
                            /*@bgen(jjtree) var_dec */
                            ASTvar_dec jjtn000 = new ASTvar_dec(JJTVAR_DEC);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(VAR);
        identifier();
        jj_consume_token(COLON);
        type();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("var_decl");
    }
  }

  static final public String identifier() throws ParseException {
    trace_call("identifier");
    try {
                                   /*@bgen(jjtree) identifier */
                                   ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(IDENTIFIER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.value = t.image; {if (true) return t.image;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("identifier");
    }
  }

  static final public void const_decl() throws ParseException {
    trace_call("const_decl");
    try {
                                /*@bgen(jjtree) const_dec */
                                ASTconst_dec jjtn000 = new ASTconst_dec(JJTCONST_DEC);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(CONS);
        identifier();
        jj_consume_token(COLON);
        type();
        jj_consume_token(ASSIGN);
        expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     jjtn000.value = t.image;
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("const_decl");
    }
  }

  static final public void function_list() throws ParseException {
    trace_call("function_list");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOL:
      case VOID:
        function();
        function_list();
        break;
      default:
        jj_la1[2] = jj_gen;

      }
    } finally {
      trace_return("function_list");
    }
  }

  static final public void function() throws ParseException {
    trace_call("function");
    try {
                                 /*@bgen(jjtree) #function(> 1) */
  ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        type();
        identifier();
        jj_consume_token(LB);
        parameter_list();
        jj_consume_token(RB);
        jj_consume_token(IS);
        decl_list();
        jj_consume_token(BEGIN);
        statement_block();
        jj_consume_token(RET);
        jj_consume_token(LB);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LB:
        case MINUS:
        case TRUE:
        case FALSE:
        case IDENTIFIER:
        case NUMBER:
                      ASTret jjtn001 = new ASTret(JJTRET);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
          try {
            expression();
          } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
          } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  1);
                      }
          }
          break;
        default:
          jj_la1[3] = jj_gen;
                                           ASTret jjtn002 = new ASTret(JJTRET);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
          try {
                                           jjtree.closeNodeScope(jjtn002, true);
                                           jjtc002 = false;

          } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002, true);
                                           }
          }
        }
        jj_consume_token(RB);
        jj_consume_token(SEMIC);
        jj_consume_token(END);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
      }
    } finally {
      trace_return("function");
    }
  }

  static final public String type() throws ParseException {
    trace_call("type");
    try {
                       /*@bgen(jjtree) type */
                       ASTtype jjtn000 = new ASTtype(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          t = jj_consume_token(INT);
          break;
        case BOOL:
          t = jj_consume_token(BOOL);
          break;
        case VOID:
          t = jj_consume_token(VOID);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.value = t.image; {if (true) return t.image;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type");
    }
  }

// rewrite "more parameters" to stop nesting of param list node
  static final public void parameter_list() throws ParseException {
    trace_call("parameter_list");
    try {
                                           /*@bgen(jjtree) #parameter_list(true) */
  ASTparameter_list jjtn000 = new ASTparameter_list(JJTPARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          identifier();
          jj_consume_token(COLON);
                               ASTparameter jjtn001 = new ASTparameter(JJTPARAMETER);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
          try {
            type();
          } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
          } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
          }
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[5] = jj_gen;
              break label_1;
            }
            jj_consume_token(COMMA);
            identifier();
            jj_consume_token(COLON);
                                        ASTparameter jjtn002 = new ASTparameter(JJTPARAMETER);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
            try {
              type();
            } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
            } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
            }
          }
          break;
        default:
          jj_la1[6] = jj_gen;
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;

        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("parameter_list");
    }
  }

  static final public void main() throws ParseException {
    trace_call("main");
    try {
                    /*@bgen(jjtree) main */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(MAIN);
        jj_consume_token(BEGIN);
        decl_list();
        statement_block();
        jj_consume_token(END);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("main");
    }
  }

  static final public void statement_block() throws ParseException {
    trace_call("statement_block");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case ELSE:
      case WHILE:
      case BEGIN:
      case SSKIP:
      case IDENTIFIER:
        statement();
        statement_block();
        break;
      default:
        jj_la1[7] = jj_gen;

      }
    } finally {
      trace_return("statement_block");
    }
  }

  static final public void statement() throws ParseException {
    trace_call("statement");
    try {
                         Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifier();
        statement_beta();
        break;
      case BEGIN:
        jj_consume_token(BEGIN);
        statement_block();
        jj_consume_token(END);
        break;
      case IF:
        t = jj_consume_token(IF);
        condition();
        jj_consume_token(BEGIN);
        statement_block();
        jj_consume_token(END);
                                                                  ASTifstate jjtn001 = new ASTifstate(JJTIFSTATE);
                                                                  boolean jjtc001 = true;
                                                                  jjtree.openNodeScope(jjtn001);
        try {
                                                                  jjtree.closeNodeScope(jjtn001,  3);
                                                                  jjtc001 = false;
                                                                 jjtn001.value = t.image;
        } finally {
                                                                  if (jjtc001) {
                                                                    jjtree.closeNodeScope(jjtn001,  3);
                                                                  }
        }
        break;
      case ELSE:
        t = jj_consume_token(ELSE);
        jj_consume_token(BEGIN);
        statement_block();
        jj_consume_token(END);
                                                        ASTels jjtn002 = new ASTels(JJTELS);
                                                        boolean jjtc002 = true;
                                                        jjtree.openNodeScope(jjtn002);
        try {
                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                        jjtc002 = false;
                                                       jjtn002.value = t.image;
        } finally {
                                                        if (jjtc002) {
                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                        }
        }
        break;
      case WHILE:
        t = jj_consume_token(WHILE);
        condition();
        jj_consume_token(BEGIN);
        statement_block();
        jj_consume_token(END);
                                                                     ASTwhil jjtn003 = new ASTwhil(JJTWHIL);
                                                                     boolean jjtc003 = true;
                                                                     jjtree.openNodeScope(jjtn003);
        try {
                                                                     jjtree.closeNodeScope(jjtn003,  2);
                                                                     jjtc003 = false;
                                                                    jjtn003.value = t.image;
        } finally {
                                                                     if (jjtc003) {
                                                                       jjtree.closeNodeScope(jjtn003,  2);
                                                                     }
        }
        break;
      case SSKIP:
        jj_consume_token(SSKIP);
        jj_consume_token(SEMIC);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("statement");
    }
  }

  static final public void statement_beta() throws ParseException {
    trace_call("statement_beta");
    try {
                               Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        t = jj_consume_token(ASSIGN);
        expression();
        jj_consume_token(SEMIC);
                                               ASTassign jjtn001 = new ASTassign(JJTASSIGN);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
        try {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                               jjtc001 = false;
                                              jjtn001.value = t.image;
        } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001,  2);
                                               }
        }
        break;
      case LB:
        t = jj_consume_token(LB);
        arg_list();
        jj_consume_token(RB);
        jj_consume_token(SEMIC);
                                              ASTfunc_call jjtn002 = new ASTfunc_call(JJTFUNC_CALL);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
        try {
                                              jjtree.closeNodeScope(jjtn002,  2);
                                              jjtc002 = false;
                                             jjtn002.value = t.image;
        } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("statement_beta");
    }
  }

//Expression > Fragment > Expression.
  static final public void expression() throws ParseException {
    trace_call("expression");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case TRUE:
      case FALSE:
      case IDENTIFIER:
      case NUMBER:
        fragment();
        binary_arith_op();
        break;
      case LB:
        jj_consume_token(LB);
        expression();
        jj_consume_token(RB);
        binary_arith_op();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expression");
    }
  }

//rewrite bin op to allow children
  static final public void binary_arith_op() throws ParseException {
    trace_call("binary_arith_op");
    try {
                                Token t;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
          fragment();
                                     ASTplus jjtn001 = new ASTplus(JJTPLUS);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
          try {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtc001 = false;
                                    jjtn001.value = t.image;
          } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                     }
          }
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          fragment();
                                      ASTminus jjtn002 = new ASTminus(JJTMINUS);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
          try {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                      jjtc002 = false;
                                     jjtn002.value = t.image;
          } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                      }
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("binary_arith_op");
    }
  }

  static final public void fragment() throws ParseException {
    trace_call("fragment");
    try {
                         Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        t = jj_consume_token(MINUS);
        identifier();
                                      ASTminus_identifier jjtn001 = new ASTminus_identifier(JJTMINUS_IDENTIFIER);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
        try {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                      jjtc001 = false;
                                     jjtn001.value = t.image;
        } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  1);
                                      }
        }
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
                          ASTnum jjtn002 = new ASTnum(JJTNUM);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
        try {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                         jjtn002.value = t.image;
        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
        }
        break;
      case TRUE:
        t = jj_consume_token(TRUE);
                        ASTbool jjtn003 = new ASTbool(JJTBOOL);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
        try {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                       jjtn003.value = t.image;
        } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
        }
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                         ASTbool jjtn004 = new ASTbool(JJTBOOL);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
        try {
                         jjtree.closeNodeScope(jjtn004, true);
                         jjtc004 = false;
                        jjtn004.value = t.image;
        } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                         }
        }
        break;
      case IDENTIFIER:
        identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LB:
          jj_consume_token(LB);
          arg_list();
          jj_consume_token(RB);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("fragment");
    }
  }

//Rewrite condition to make nodes?
  static final public void condition() throws ParseException {
    trace_call("condition");
    try {
                          Token t;
      condition_beta();
      label_3:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          t = jj_consume_token(AND);
          condition_beta();
                                                      ASTand jjtn001 = new ASTand(JJTAND);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
          try {
                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                      jjtc001 = false;
                                                     jjtn001.value = t.image;
          } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                      }
          }
          break;
        case OR:
          t = jj_consume_token(OR);
          condition_beta();
                                    ASTor jjtn002 = new ASTor(JJTOR);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
          try {
                                    jjtree.closeNodeScope(jjtn002,  2);
                                    jjtc002 = false;
                                   jjtn002.value = t.image;
          } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                    }
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("condition");
    }
  }

//have to rewrite cond_beta to capture 2nd expression as child
  static final public void condition_beta() throws ParseException {
    trace_call("condition_beta");
    try {
                               Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        t = jj_consume_token(NOT);
        condition();
                                   ASTnot jjtn001 = new ASTnot(JJTNOT);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
        try {
                                   jjtree.closeNodeScope(jjtn001,  1);
                                   jjtc001 = false;
                                  jjtn001.value = t.image;
        } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  1);
                                   }
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_2(3)) {
          jj_consume_token(LB);
          condition();
          jj_consume_token(RB);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LB:
          case MINUS:
          case TRUE:
          case FALSE:
          case IDENTIFIER:
          case NUMBER:
            expression();
            comp_op();
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("condition_beta");
    }
  }

  static final public void comp_op() throws ParseException {
    trace_call("comp_op");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
                    ASTeq jjtn001 = new ASTeq(JJTEQ);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
        try {
          expression();
        } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
        } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
        }
        break;
      case NEQ:
        jj_consume_token(NEQ);
                  ASTneq jjtn002 = new ASTneq(JJTNEQ);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          expression();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
        }
        break;
      case LT:
        jj_consume_token(LT);
                 ASTlt jjtn003 = new ASTlt(JJTLT);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
        try {
          expression();
        } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte003;}
                 }
                 if (jjte003 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte003;}
                 }
                 {if (true) throw (Error)jjte003;}
        } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  2);
                 }
        }
        break;
      case LTE:
        jj_consume_token(LTE);
                  ASTlte jjtn004 = new ASTlte(JJTLTE);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
        try {
          expression();
        } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte004;}
                  }
                  if (jjte004 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte004;}
                  }
                  {if (true) throw (Error)jjte004;}
        } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
        }
        break;
      case GT:
        jj_consume_token(GT);
                 ASTgt jjtn005 = new ASTgt(JJTGT);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
        try {
          expression();
        } catch (Throwable jjte005) {
                 if (jjtc005) {
                   jjtree.clearNodeScope(jjtn005);
                   jjtc005 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte005 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte005;}
                 }
                 if (jjte005 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte005;}
                 }
                 {if (true) throw (Error)jjte005;}
        } finally {
                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005,  2);
                 }
        }
        break;
      case GTE:
        jj_consume_token(GTE);
                  ASTgte jjtn006 = new ASTgte(JJTGTE);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
        try {
          expression();
        } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte006;}
                  }
                  if (jjte006 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte006;}
                  }
                  {if (true) throw (Error)jjte006;}
        } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006,  2);
                  }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("comp_op");
    }
  }

  static final public void arg_list() throws ParseException {
    trace_call("arg_list");
    try {
                             /*@bgen(jjtree) arg_list */
  ASTarg_list jjtn000 = new ASTarg_list(JJTARG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_4;
          }
          identifier();
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[20] = jj_gen;
              break label_5;
            }
            jj_consume_token(COMMA);
            identifier();
          }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("arg_list");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(LB)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(GTE)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(LTE)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(LB)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(LB)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CalParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x30000000,0x30000000,0x80000000,0x48000,0x80000000,0x800,0x0,0x0,0x0,0xc000,0x48000,0x60000,0x60000,0x8000,0x40000,0x300000,0x80000,0x48000,0xfc00000,0x0,0x800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x3,0xa060,0x3,0x0,0x2000,0x2998,0x2998,0x0,0xa060,0x0,0x0,0x0,0xa060,0x0,0x0,0xa060,0x0,0x2000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CalParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CalParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CalParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CalParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CalParser(CalParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CalParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
