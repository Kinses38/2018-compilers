/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CalParser.jj */
/*@egen*//*******************************
 ***** SECTION 1 - OPTIONS *****
 *******************************/
options 
{ 
	JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;
    DEBUG_TOKEN_MANAGER= false;
    DEBUG_PARSER = true;
    DEBUG_LOOKAHEAD = false;
	               
	             
 }

/*********************************
 ***** SECTION 2 - USER CODE *****
 *********************************/
PARSER_BEGIN(CalParser)
import java.io.*;
import java.util.*;

public class CalParser/*@bgen(jjtree)*/implements CalParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCalParserState jjtree = new JJTCalParserState();

/*@egen*/
	public static void main(String args[]){
		CalParser parser;
		if (args.length == 0){
			System.out.println("CAL parser: Reading from input: ");
			parser = new CalParser(System.in);
		} else if (args.length == 1) {
			System.out.println("CAL Parser: Reading from file " + args[0] + "..");
		
		try {
			parser = new CalParser(new FileInputStream(args[0]));
		} catch (java.io.FileNotFoundException e) {
			System.out.println("CAL Parser: File " + args[0] + "not found.");
			return;
			}
		}
		else {
			System.out.println("CAL Parser: Usage is one of:");
			System.out.println("		java CalParser < inputfile");
			System.out.println("OR");
			System.out.println("		java CalParser inputfile");
			return;
		}
		
		try {
			//parser.Prog();
			SimpleNode root = parser.Prog();

			System.out.println("### AST ###");
			root.dump("\t");
			System.out.println("### END AST");

            MyVisitor v = new MyVisitor();
            root.jjtAccept(v,null);
			System.out.println("CAL Parser: CAL program parsed successfully");
			}catch (ParseException e) {
				System.out.println(e.getMessage());
				System.out.println("CAL Parser: Encountered errors during parse.");

		}
	}
}
PARSER_END(CalParser)

/*****************************************
 ***** SECTION 3 - TOKEN DEFINITIONS *****
 *****************************************/

TOKEN_MGR_DECLS:
{
	static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	  " "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

SKIP : /* Comments */
{
	  "/*" { commentNesting ++;} : IN_COMMENT
	| <"//" (~["\n"])* "\n">
}

<IN_COMMENT> SKIP : 
{
   "/*" { commentNesting++;}
   | "*/" { commentNesting--;
            if(commentNesting == 0)
                SwitchTo(DEFAULT);
            }
   |<~[]>
}

TOKEN : /*Keywords and Punctuation */
{
	<COMMA : ",">
	|<SEMIC : ";">
	|<COLON : ":">
	|<ASSIGN : ":=">
	|<LB : "(">
	|<RB : ")">
	|<PLUS : "+">
	|<MINUS : "-">
	|<NOT : "~">
	|<OR : "|">
	|<AND : "&">
	|<EQUAL : "=">
	|<NEQ : "!=">
	|<LT : "<">
	|<LTE : "<=">
	|<GT : ">">
	|<GTE : ">=">

	|<VAR : "variable">
	|<CONS : "constant">
	|<RET : "return">
	|<INT : "integer">
	|<BOOL : "boolean">
	|<VOID : "void">
	|<MAIN : "main">
	|<IF : "if">
	|<ELSE : "else">
	|<TRUE : "true">
	|<FALSE : "false">
	|<WHILE : "while">
	|<BEGIN : "begin">
	|<END : "end">
	|<IS : "is">
	|<SSKIP : "skip">

	|< #LETTER: (["a"-"z", "A"-"Z"])>
	|< IDENTIFIER: <LETTER> (<LETTER> | <NUMBER> | "_")* >
	|< #DIGIT: ["0" - "9"]>
	|< NUMBER: ("-" ["1" - "9"] (<DIGIT>)*)
			   |( ["1" - "9"] (<DIGIT>)* ) 
			   | "0">	

    |<OTHER : ~[]>
}


/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

SimpleNode Prog() : {/*@bgen(jjtree) Prog */
  ASTProg jjtn000 = new ASTProg(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Prog */
        try {
/*@egen*/
	decl_list() 
	function_list() 
	main()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void decl_list()       : {}
{
	(decl() <SEMIC> decl_list()) | {} 
}

void decl()       : {}
{
	var_decl() | const_decl()
}

// Creating Identifier prod rule to return info based on ExprLang.jjt by David Sinclair
void var_decl()          : {/*@bgen(jjtree) var_dec */
                            ASTvar_dec jjtn000 = new ASTvar_dec(JJTVAR_DEC);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) var_dec */
        try {
/*@egen*/
	t = <VAR> identifier() <COLON> type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String identifier()             : {/*@bgen(jjtree) identifier */
                                   ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) identifier */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void const_decl()            : {/*@bgen(jjtree) const_dec */
                                ASTconst_dec jjtn000 = new ASTconst_dec(JJTCONST_DEC);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) const_dec */
        try {
/*@egen*/
	t = <CONS> identifier() <COLON> type() <ASSIGN> expression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function_list()       : {}
{
	function() function_list() | {}
}

void function()               : {/*@bgen(jjtree) #function(> 1) */
  ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #function(> 1) */
        try {
/*@egen*/
	type() identifier() <LB> parameter_list()<RB> <IS>
	decl_list()
	<BEGIN>
	statement_block()
	//ret type = func header type? Returning only one?
	<RET> <LB> (/*@bgen(jjtree) #ret( 1) */
                    {
                      ASTret jjtn001 = new ASTret(JJTRET);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/expression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  1);
                      }
                    }
/*@egen*/        |/*@bgen(jjtree) ret */
                                         {
                                           ASTret jjtn002 = new ASTret(JJTRET);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                         }
                                         try {
/*@egen*//*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn002, true);
                                           jjtc002 = false;
                                         }
/*@egen*/{}/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002, true);
                                           }
                                         }
/*@egen*/     ) <RB> <SEMIC>
	<END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

String type()       : {/*@bgen(jjtree) type */
                       ASTtype jjtn000 = new ASTtype(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) type */
        try {
/*@egen*/
	(t = <INT> | t = <BOOL> | t =  <VOID>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// rewrite "more parameters" to stop nesting of param list node

void parameter_list()                   : {/*@bgen(jjtree) #parameter_list(true) */
  ASTparameter_list jjtn000 = new ASTparameter_list(JJTPARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #parameter_list(true) */
        try {
/*@egen*/
	(identifier() <COLON>/*@bgen(jjtree) #parameter( 2) */
                             {
                               ASTparameter jjtn001 = new ASTparameter(JJTPARAMETER);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/type()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
                             }
/*@egen*/              )
	(<COMMA> identifier() <COLON>/*@bgen(jjtree) #parameter( 2) */
                                      {
                                        ASTparameter jjtn002 = new ASTparameter(JJTPARAMETER);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                      }
                                      try {
/*@egen*/ type()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte002;
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          throw (ParseException)jjte002;
                                        }
                                        throw (Error)jjte002;
                                      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
                                      }
/*@egen*/              )*
	|/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void main()      : {/*@bgen(jjtree) main */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) main */
        try {
/*@egen*/
	<MAIN>
	<BEGIN>
	decl_list()
	statement_block()
	<END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statement_block()       : {}
{
	statement() statement_block() | {}
}

void statement()      : {Token t;}
{
	  identifier() statement_beta()
	| <BEGIN> statement_block() <END>
	| (t = <IF> condition() <BEGIN> statement_block() <END>/*@bgen(jjtree) #ifstate( 3) */
                                                                {
                                                                  ASTifstate jjtn001 = new ASTifstate(JJTIFSTATE);
                                                                  boolean jjtc001 = true;
                                                                  jjtree.openNodeScope(jjtn001);
                                                                }
                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn001,  3);
                                                                  jjtc001 = false;
                                                                }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc001) {
                                                                    jjtree.closeNodeScope(jjtn001,  3);
                                                                  }
                                                                }
/*@egen*/           )
	| (t = <ELSE> <BEGIN> statement_block() <END>/*@bgen(jjtree) #els( 2) */
                                                      {
                                                        ASTels jjtn002 = new ASTels(JJTELS);
                                                        boolean jjtc002 = true;
                                                        jjtree.openNodeScope(jjtn002);
                                                      }
                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                        jjtc002 = false;
                                                      }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                                      } finally {
                                                        if (jjtc002) {
                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                        }
                                                      }
/*@egen*/        )
	| (t = <WHILE> condition() <BEGIN> statement_block() <END>/*@bgen(jjtree) #whil( 2) */
                                                                   {
                                                                     ASTwhil jjtn003 = new ASTwhil(JJTWHIL);
                                                                     boolean jjtc003 = true;
                                                                     jjtree.openNodeScope(jjtn003);
                                                                   }
                                                                   try {
/*@egen*//*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn003,  2);
                                                                     jjtc003 = false;
                                                                   }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                                                                   } finally {
                                                                     if (jjtc003) {
                                                                       jjtree.closeNodeScope(jjtn003,  2);
                                                                     }
                                                                   }
/*@egen*/        )
	| <SSKIP> <SEMIC>
}

void statement_beta()       : {Token t;}
{
	  (t = <ASSIGN> expression() <SEMIC>/*@bgen(jjtree) #assign( 2) */
                                             {
                                               ASTassign jjtn001 = new ASTassign(JJTASSIGN);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
                                             }
                                             try {
/*@egen*//*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                               jjtc001 = false;
                                             }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001,  2);
                                               }
                                             }
/*@egen*/           )
	| (t = <LB> arg_list() <RB> <SEMIC>/*@bgen(jjtree) #func_call( 2) */
                                            {
                                              ASTfunc_call jjtn002 = new ASTfunc_call(JJTFUNC_CALL);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                            }
                                            try {
/*@egen*//*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn002,  2);
                                              jjtc002 = false;
                                            }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
                                            }
/*@egen*/              )
}

//Expression > Fragment > Expression.
void expression()       : {}
{
	  fragment() (binary_arith_op())
	  | (<LB> expression() <RB> binary_arith_op())
}

//rewrite bin op to allow children
void binary_arith_op()       : {Token t;}
{
	  ( (t = <PLUS> fragment()/*@bgen(jjtree) #plus( 2) */
                                   {
                                     ASTplus jjtn001 = new ASTplus(JJTPLUS);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtc001 = false;
                                   }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                     }
                                   }
/*@egen*/         )
	  | (t = <MINUS> fragment()/*@bgen(jjtree) #minus( 2) */
                                    {
                                      ASTminus jjtn002 = new ASTminus(JJTMINUS);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                      jjtc002 = false;
                                    }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                      }
                                    }
/*@egen*/          ))*
}

void fragment()       : {Token t;}
{
	  (t = <MINUS> identifier()/*@bgen(jjtree) #minus_identifier( 1) */
                                    {
                                      ASTminus_identifier jjtn001 = new ASTminus_identifier(JJTMINUS_IDENTIFIER);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                      jjtc001 = false;
                                    }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  1);
                                      }
                                    }
/*@egen*/                     )
	| (t = <NUMBER>/*@bgen(jjtree) num */
                        {
                          ASTnum jjtn002 = new ASTnum(JJTNUM);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                        }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/     )
	| (t = <TRUE>/*@bgen(jjtree) bool */
                      {
                        ASTbool jjtn003 = new ASTbool(JJTBOOL);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                      }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
                      }
/*@egen*/      )
	| (t = <FALSE>/*@bgen(jjtree) bool */
                       {
                         ASTbool jjtn004 = new ASTbool(JJTBOOL);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn004, true);
                         jjtc004 = false;
                       }
/*@egen*/ {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                         }
                       }
/*@egen*/      )
	|  identifier() (<LB> arg_list() <RB>)?
}

//Rewrite condition to make nodes?
void condition()       : {Token t;}
{
	 condition_beta()
	 (LOOKAHEAD(2)  (t = <AND> condition_beta()/*@bgen(jjtree) #and( 2) */
                                                    {
                                                      ASTand jjtn001 = new ASTand(JJTAND);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
                                                    }
                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                      jjtc001 = false;
                                                    }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                    } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                      }
                                                    }
/*@egen*/        
     |  t = <OR> condition_beta()/*@bgen(jjtree) #or( 2) */
                                  {
                                    ASTor jjtn002 = new ASTor(JJTOR);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn002,  2);
                                    jjtc002 = false;
                                  }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002,  2);
                                    }
                                  }
/*@egen*/       ))*

}

//have to rewrite cond_beta to capture 2nd expression as child
void condition_beta()       : {Token t;}
{
	  (t = <NOT> condition()/*@bgen(jjtree) #not( 1) */
                                 {
                                   ASTnot jjtn001 = new ASTnot(JJTNOT);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn001,  1);
                                   jjtc001 = false;
                                 }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  1);
                                   }
                                 }
/*@egen*/        )
	| LOOKAHEAD(3) <LB> condition() <RB>
	//| expression() comp_op() expression()
	| expression() comp_op()
}

void comp_op()       : {}
{
	  <EQUAL>/*@bgen(jjtree) #eq( 2) */
                  {
                    ASTeq jjtn001 = new ASTeq(JJTEQ);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
                  }
/*@egen*/       
	| <NEQ>/*@bgen(jjtree) #neq( 2) */
                {
                  ASTneq jjtn002 = new ASTneq(JJTNEQ);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/          
	| <LT>/*@bgen(jjtree) #lt( 2) */
               {
                 ASTlt jjtn003 = new ASTlt(JJTLT);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
               }
               try {
/*@egen*/ expression()/*@bgen(jjtree)*/
               } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   throw (RuntimeException)jjte003;
                 }
                 if (jjte003 instanceof ParseException) {
                   throw (ParseException)jjte003;
                 }
                 throw (Error)jjte003;
               } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  2);
                 }
               }
/*@egen*/          
	| <LTE>/*@bgen(jjtree) #lte( 2) */
                {
                  ASTlte jjtn004 = new ASTlte(JJTLTE);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    throw (RuntimeException)jjte004;
                  }
                  if (jjte004 instanceof ParseException) {
                    throw (ParseException)jjte004;
                  }
                  throw (Error)jjte004;
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
                }
/*@egen*/          
	| <GT>/*@bgen(jjtree) #gt( 2) */
               {
                 ASTgt jjtn005 = new ASTgt(JJTGT);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
               }
               try {
/*@egen*/ expression()/*@bgen(jjtree)*/
               } catch (Throwable jjte005) {
                 if (jjtc005) {
                   jjtree.clearNodeScope(jjtn005);
                   jjtc005 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte005 instanceof RuntimeException) {
                   throw (RuntimeException)jjte005;
                 }
                 if (jjte005 instanceof ParseException) {
                   throw (ParseException)jjte005;
                 }
                 throw (Error)jjte005;
               } finally {
                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005,  2);
                 }
               }
/*@egen*/          
	| <GTE>/*@bgen(jjtree) #gte( 2) */
                {
                  ASTgte jjtn006 = new ASTgte(JJTGTE);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
                }
                try {
/*@egen*/ expression()/*@bgen(jjtree)*/
                } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    throw (RuntimeException)jjte006;
                  }
                  if (jjte006 instanceof ParseException) {
                    throw (ParseException)jjte006;
                  }
                  throw (Error)jjte006;
                } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006,  2);
                  }
                }
/*@egen*/          
}

void arg_list()           : {/*@bgen(jjtree) arg_list */
  ASTarg_list jjtn000 = new ASTarg_list(JJTARG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) arg_list */
        try {
/*@egen*/
	((identifier() (<COMMA> identifier())*))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

